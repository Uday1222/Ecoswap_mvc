@model EcoSwap.Models.Item
@{
    ViewData["Title"] = Model.Title;
    var currentUserId = Context.Session.GetString("UserId");
    var currentUsername = Context.Session.GetString("Username");
    var currentFullName = Context.Session.GetString("FullName");
    var isLoggedIn = !string.IsNullOrEmpty(currentUserId);
    var isItemOwner = isLoggedIn && Model.UserId.HasValue && Model.UserId.Value.ToString() == currentUserId;
    var itemOwnerId = Model.UserId ?? 0;
}

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="row mb-2">
                <div class="col-auto">
                    <a class="btn btn-outline-secondary" onclick="window.history.back()"><i class="bi bi-arrow-left"></i> Back</a>
                </div>
            </div>
            <div class="card shadow-sm" style="height: 440px;">
                <div class="row g-0 h-100">
                    <div class="col-md-5">
                        <img src="@Model.ImagePath" class="img-fluid rounded-start w-100" alt="@Model.Title" style="object-fit:cover; height:400px; width:100%;">
                    </div>
                    <div class="col-md-7 h-100">
                        <div class="card-body d-flex flex-column h-100" style="height:400px;">
                            <div class="flex-grow-0">
                                <h3 class="card-title mb-2">@Model.Title</h3>
                                @if (Model.IsGiveaway)
                                {
                                    <span class="badge bg-success mb-2">Free Giveaway</span>
                                }
                                else
                                {
                                    <span class="badge bg-primary mb-2">â‚¹@Model.Price</span>
                                }
                                <p class="card-text">@Model.Description</p>
                                <p class="text-muted small mb-2">Posted on @Model.DatePosted.ToString("dd MMM yyyy HH:mm")</p>
                            </div>
                            <hr>
                            <div class="flex-grow-1 d-flex flex-column justify-content-end" style="min-height:0;">
                                @if (isLoggedIn && !isItemOwner)
                                {
                                    <h5>Chat with Owner</h5>
                                    <div id="chatMessages" class="flex-grow-1 border rounded p-2 mb-2" style="height:140px; max-height:140px; overflow-y:auto; background-color:inherit;"></div>
                                    <div class="d-flex gap-2">
                                        <input type="text" class="form-control" id="chatInput" placeholder="Type your message..." />
                                        <button class="btn btn-success" id="sendBtn" onclick="sendDetailsChat()">Send</button>
                                    </div>
                                }
                                else if (isItemOwner)
                                {
                                    <h5>Chat with Interested Users</h5>
                                    <div class="mb-2">
                                        <select id="chatUserSelect" class="form-select">
                                            <option value="">Select a user to chat with...</option>
                                        </select>
                                        <div id="noUsersMsg" class="text-muted small mt-2" style="display:none;">No users have messaged about this item yet.</div>
                                    </div>
                                    <div id="chatMessages" class="flex-grow-1 border rounded p-2 mb-2" style="height:140px; max-height:140px; overflow-y:auto; background-color:inherit;"></div>
                                    <div class="d-flex gap-2">
                                        <input type="text" class="form-control" id="chatInput" placeholder="Type your message..." disabled />
                                        <button class="btn btn-success" id="sendBtn" disabled>Send</button>
                                    </div>
                                }
                                else
                                {
                                    <div class="text-center">
                                        <h5>Interested in this item?</h5>
                                        <p class="text-muted">Please <a asp-controller="Account" asp-action="Login">login</a> to chat with the owner.</p>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (isLoggedIn)
{
    @section Scripts {
        <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
        <script>

            $(document).ready(function(){
                loadChatUsers();
            });
            const currentUserId = parseInt('@currentUserId');
            const currentUsername = '@currentUsername';
            const currentFullName = '@currentFullName';
            const itemId = parseInt('@Model.Id');
            const itemOwnerId = parseInt('@itemOwnerId');
            const isItemOwner = @isItemOwner.ToString().ToLower();
            let selectedUserId = null;
            let connection = null;

            function clearChatMessages() {
                document.getElementById('chatMessages').innerHTML = '';
            }

             function enableChatInput(enable) {
                var chatInput = document.getElementById('chatInput');
                var sendBtn = document.getElementById('sendBtn');
                if (chatInput) chatInput.disabled = !enable;
                if (sendBtn) sendBtn.disabled = !enable;
            }

            function loadChatUsers() {
                debugger;
                console.log('Loading chat users for item:', itemId);
                fetch(`/Item/GetChatUsers?itemId=${itemId}`)
                    .then(res => res.json())
                    .then(users => {
                        console.log('Chat users received:', users);
                        const select = document.getElementById('chatUserSelect');
                        const noUsersMsg = document.getElementById('noUsersMsg');
                        select.innerHTML = '<option value="">Select a user to chat with...</option>';
                        if (users.length === 0) {
                            console.log('No users found');
                            noUsersMsg.style.display = '';
                            enableChatInput(false);
                        } else {
                            console.log('Found users:', users);
                            noUsersMsg.style.display = 'none';
                            users.forEach(uid => {
                                select.innerHTML += `<option value="${uid}">User #${uid}</option>`;
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error loading chat users:', error);
                    });
            }

            function loadConversationWithUser(userId) {
                clearChatMessages();
                console.log('Loading conversation with user:', userId);
                
                // For owners, use the new JoinOwnerChat method
                if (isItemOwner === 'true') {
                    if (connection && connection.state === signalR.HubConnectionState.Connected) {
                        connection.invoke("JoinOwnerChat", itemId, currentUserId, userId);
                        enableChatInput(true);
                    } else {
                        console.error('Connection not ready for owner chat');
                        enableChatInput(false);
                    }
                } else {
                    // For non-owners, use the regular JoinItemChat method
                    if (connection && connection.state === signalR.HubConnectionState.Connected) {
                        connection.invoke("JoinItemChat", itemId, currentUserId);
                        enableChatInput(true);
                    } else {
                        // Fallback: create new connection if needed
                        if (connection) connection.stop();
                        connection = new signalR.HubConnectionBuilder()
                            .withUrl("/chathub")
                            .build();
                        connection.on("ReceiveMessage", function (sender, message, sentAt) {
                            var msg = document.createElement('div');
                            var isCurrentUser = sender === currentFullName || sender === currentUsername;
                            var displayName = sender;
                            if (isCurrentUser) {
                                msg.className = 'd-flex justify-content-end mb-2';
                                msg.innerHTML = `
                                    <div class=\"p-2 border rounded shadow-sm sender-message\">
                                        <div class=\"small\">${message}</div>
                                        <div class=\"text-muted\" style=\"font-size: 0.7rem;\">${new Date(sentAt).toLocaleTimeString()}</div>
                                    </div>
                                `;
                            } else {
                                msg.className = 'd-flex justify-content-start mb-2';
                                msg.innerHTML = `
                                    <div class=\"p-2 border rounded shadow-sm receiver-message\">
                                        <div class=\"small mb-1\">${displayName}</div>
                                        <div>${message}</div>
                                        <div class=\"text-muted\" style=\"font-size: 0.7rem;\">${new Date(sentAt).toLocaleTimeString()}</div>
                                    </div>
                                `;
                            }
                            document.getElementById('chatMessages').appendChild(msg);
                            document.getElementById('chatMessages').scrollTop = document.getElementById('chatMessages').scrollHeight;
                        });
                        connection.start().then(function () {
                            connection.invoke("JoinItemChat", itemId, currentUserId);
                            enableChatInput(true);
                        });
                    }
                }
            }

            if (isItemOwner === true) {
                debugger;
                // Owner: Initialize SignalR connection for receiving messages
                connection = new signalR.HubConnectionBuilder()
                    .withUrl("/chathub")
                    .build();
                
                let lastMessage = { sender: null, message: null, sentAt: null };
                connection.on("ReceiveMessage", function (sender, message, sentAt) {
                    // Deduplicate: Only append if not a duplicate of the last message
                    if (
                        lastMessage.sender === sender &&
                        lastMessage.message === message &&
                        lastMessage.sentAt === sentAt
                    ) {
                        return;
                    }
                    lastMessage = { sender, message, sentAt };
                    var msg = document.createElement('div');
                    var isCurrentUser = sender === currentFullName || sender === currentUsername;
                    var displayName = sender;
                    if (isCurrentUser) {
                        msg.className = 'd-flex justify-content-end mb-2';
                        msg.innerHTML = `
                            <div class=\"p-2 border rounded shadow-sm sender-message\">
                                <div class=\"small\">${message}</div>
                                <div class=\"text-muted\" style=\"font-size: 0.7rem;\">${new Date(sentAt).toLocaleTimeString()}</div>
                            </div>
                        `;
                    } else {
                        msg.className = 'd-flex justify-content-start mb-2';
                        msg.innerHTML = `
                            <div class=\"p-2 border rounded shadow-sm receiver-message\">
                                <div class=\"small mb-1\">${displayName}</div>
                                <div>${message}</div>
                                <div class=\"text-muted\" style=\"font-size: 0.7rem;\">${new Date(sentAt).toLocaleTimeString()}</div>
                            </div>
                        `;
                    }
                    document.getElementById('chatMessages').appendChild(msg);
                    document.getElementById('chatMessages').scrollTop = document.getElementById('chatMessages').scrollHeight;
                });
                
                connection.start().then(function () {
                    connection.invoke("JoinItemChat", itemId, currentUserId);
                });
                
                loadChatUsers();
                document.getElementById('chatUserSelect').addEventListener('change', function () {
                    selectedUserId = parseInt(this.value);
                    console.log('Owner selected user:', selectedUserId);
                    if (selectedUserId) {
                        loadConversationWithUser(selectedUserId);
                    } else {
                        console.log('No user selected, clearing chat');
                        clearChatMessages();
                        enableChatInput(false);
                    }
                });
                document.getElementById('sendBtn').addEventListener('click', function () {
                    sendDetailsChat();
                });
            } else {
                // Non-owner: always enable chat input and start SignalR connection
                enableChatInput(false); // Disable input until connection is ready
                connection = new signalR.HubConnectionBuilder()
                    .withUrl("/chathub")
                    .build();
                let lastMessage = { sender: null, message: null, sentAt: null };
                connection.on("ReceiveMessage", function (sender, message, sentAt) {
                    // Deduplicate: Only append if not a duplicate of the last message
                    if (
                        lastMessage.sender === sender &&
                        lastMessage.message === message &&
                        lastMessage.sentAt === sentAt
                    ) {
                        return;
                    }
                    lastMessage = { sender, message, sentAt };
                    var msg = document.createElement('div');
                    var isCurrentUser = sender === currentFullName || sender === currentUsername;
                    var displayName = sender;
                    if (isCurrentUser) {
                        msg.className = 'd-flex justify-content-end mb-2';
                        msg.innerHTML = `
                            <div class=\"p-2 border rounded shadow-sm sender-message\">
                                <div class=\"small\">${message}</div>
                                <div class=\"text-muted\" style=\"font-size: 0.7rem;\">${new Date(sentAt).toLocaleTimeString()}</div>
                            </div>
                        `;
                    } else {
                        msg.className = 'd-flex justify-content-start mb-2';
                        msg.innerHTML = `
                            <div class=\"p-2 border rounded shadow-sm receiver-message\">
                                <div class=\"small mb-1\">${displayName}</div>
                                <div>${message}</div>
                                <div class=\"text-muted\" style=\"font-size: 0.7rem;\">${new Date(sentAt).toLocaleTimeString()}</div>
                            </div>
                        `;
                    }
                    document.getElementById('chatMessages').appendChild(msg);
                    document.getElementById('chatMessages').scrollTop = document.getElementById('chatMessages').scrollHeight;
                });
                connection.start().then(function () {
                    connection.invoke("JoinItemChat", itemId, currentUserId);
                    enableChatInput(true); // Enable input after connection is ready
                });
                // For non-owners, add event listener to the send button
                var sendBtn = document.getElementById('sendBtn');
                if (sendBtn) {
                    sendBtn.addEventListener('click', function () {
                        sendDetailsChat();
                    });
                }
            }

            function sendDetailsChat() {
                console.log('sendDetailsChat called');
                console.log('connection:', connection);
                console.log('currentUserId:', currentUserId);
                console.log('itemId:', itemId);
                console.log('isItemOwner:', isItemOwner);
                
                if (!connection) {
                    alert('Chat connection not ready. Please wait a moment and try again.');
                    return;
                }
                var input = document.getElementById('chatInput');
                if (input.value.trim() !== '') {
                    var senderName = currentFullName || currentUsername;
                    console.log('senderName:', senderName);
                    console.log('message:', input.value);
                    
                    // Defensive: ensure IDs are valid integers
                    if (isNaN(currentUserId) || isNaN(itemId) || currentUserId === 0 || itemId === 0) {
                        alert('User or item information is missing. Please refresh the page and try again.');
                        return;
                    }
                    if (isItemOwner === true) {
                        if (!selectedUserId || isNaN(selectedUserId) || selectedUserId === 0) {
                            alert('Please select a user to chat with.');
                            return;
                        }
                        //var selectedUsr = document.getElementById('chatUserSelect').value;
                        //selectedUserId = selectedUsr;
                        console.log('Sending as owner to user:', selectedUserId);
                        connection.invoke("SendMessage", senderName, input.value, itemId, currentUserId, selectedUserId)
                            .catch(function (err) {
                                console.error('Owner send error:', err);
                                alert('Server error: ' + err.toString());
                                return console.error(err.toString());
                            });
                    } else {
                        console.log('Sending as non-owner');
                        connection.invoke("SendMessage", senderName, input.value, itemId, currentUserId, null)
                            .catch(function (err) {
                                console.error('Non-owner send error:', err);
                                alert('Server error: ' + err.toString());
                                return console.error(err.toString());
                            });
                    }
                    input.value = '';
                }
            }

            document.getElementById('chatInput')?.addEventListener('keypress', function(event) {
                if (event.key === 'Enter') {
                    sendDetailsChat();
                }
            });
        </script>
    }
}

<style>
    /* Chat message theme-based styling */
    .sender-message {
        background: var(--accent, #e8f5e9);
        color: var(--text-color, #222);
        max-width: 70%;
    }
    .receiver-message {
        background: var(--card-bg, #fff);
        color: var(--text-color, #222);
        max-width: 70%;
    }
    body.dark-theme .sender-message {
        background: var(--accent, #23272f);
        color: var(--text-color, #e0e0e0);
    }
    body.dark-theme .receiver-message {
        background: var(--card-bg, #2c313a);
        color: var(--text-color, #e0e0e0);
    }
    /* Footer compact styling */
    footer.footer {
        padding: 0.5rem 0;
        font-size: 0.95rem;
        background: var(--card-bg, #fff);
        color: var(--text-color, #222);
        border-top: 1px solid #e0e0e0;
        position: relative;
        bottom: 0;
        width: 100%;
    }
    body.dark-theme footer.footer {
        background: var(--card-bg, #2c313a);
        color: var(--text-color, #e0e0e0);
        border-top: 1px solid #444;
    }
    html, body {
        height: 100%;
    }
    body {
        display: flex;
        flex-direction: column;
        min-height: 100vh;
    }
    main[role="main"] {
        flex: 1 0 auto;
    }
    footer.footer {
        flex-shrink: 0;
    }
    /* Remove back button absolute positioning */
    .back-btn {
        position: static !important;
    }
</style> 